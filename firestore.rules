rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // HELPER FUNCTIONS
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    // Check if user is instructor
    function isInstructor() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'instructor';
    }

    // Check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Get user's college
    function getUserCollege() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.college;
    }

    // Get user's sections as an array
    function getUserSections() {
      let userData = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      // First check for sections array
      return 'sections' in userData && userData.sections is list 
        ? userData.sections 
        : (userData.section == "" || userData.section == null) 
          ? [] 
          : [userData.section];
    }

    // Old function kept for backward compatibility
    function getUserSection() {
      let sections = getUserSections();
      // Return null if no sections
      return sections.size() == 0 ? null : sections[0];
    }

    // Check if instructor has access to student's college
    function hasCollegeAccess(studentCollege) {
      return isAdmin() || (isInstructor() && getUserCollege() == studentCollege);
    }

    // Check if instructor has access to student's section
    function hasSectionAccess(studentCollege, studentSection) {
      return isAdmin() || 
            (isInstructor() && 
             getUserCollege() == studentCollege && 
             (getUserSections().size() == 0 || 
              getUserSections().hasAny([studentSection])));
    }

    // Check if the department is a valid college
    function isValidCollege(department) {
      return department == "COLLEGE OF ENGINEERING AND ARCHITECTURE" ||
             department == "COLLEGE OF MANAGEMENT, BUSINESS & ACCOUNTANCY" ||
             department == "COLLEGE OF ARTS, SCIENCES, & EDUCATION" ||
             department == "COLLEGE OF NURSING & ALLIED HEALTH SCIENCES" ||
             department == "COLLEGE OF COMPUTER STUDIES" ||
             department == "COLLEGE OF CRIMINAL JUSTICE" ||
             department == "CICS";  // For backward compatibility
    }
    
    // Validate email format if provided
    function isValidEmailFormat(email) {
      // Return true for empty or valid email format
      return email == "" || email == null || 
             email.matches("^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$");
    }
    
    // Check if a program is valid for the specified college
    function isValidProgramForCollege(college, program) {
      // For College of Engineering and Architecture
      let engineeringPrograms = [
        'BS Architecture',
        'BS Chemical Engineering',
        'BS Civil Engineering',
        'BS Computer Engineering',
        'BS Electrical Engineering',
        'BS Electronics Engineering',
        'BS Industrial Engineering',
        'BS Mechanical Engineering',
        'BS Mining Engineering'
      ];
      
      // For College of Management, Business & Accountancy
      let businessPrograms = [
        'BS Accountancy',
        'BS Accounting Information Systems',
        'BS Management Accounting',
        'BS Business Administration',
        'BS Hospitality Management',
        'BS Tourism Management',
        'BS Office Administration',
        'Bachelor in Public Administration'
      ];
      
      // For College of Arts, Sciences, & Education
      let artsPrograms = [
        'AB Communication',
        'AB English with Applied Linguistics',
        'Bachelor of Elementary Education',
        'Bachelor of Secondary Education',
        'Bachelor of Multimedia Arts',
        'BS Biology',
        'BS Math with Applied Industrial Mathematics',
        'BS Psychology'
      ];
      
      // For College of Nursing & Allied Health Sciences
      let nursingPrograms = [
        'BS Nursing',
        'BS Pharmacy'
      ];
      
      // For College of Computer Studies
      let computerPrograms = [
        'BS Computer Science',
        'BS Information Technology'
      ];
      
      // For College of Criminal Justice
      let criminalJusticePrograms = [
        'BS Criminology'
      ];
      
      // Match program to college
      return (
        (college == "COLLEGE OF ENGINEERING AND ARCHITECTURE" && engineeringPrograms.hasAny([program])) ||
        (college == "COLLEGE OF MANAGEMENT, BUSINESS & ACCOUNTANCY" && businessPrograms.hasAny([program])) ||
        (college == "COLLEGE OF ARTS, SCIENCES, & EDUCATION" && artsPrograms.hasAny([program])) ||
        (college == "COLLEGE OF NURSING & ALLIED HEALTH SCIENCES" && nursingPrograms.hasAny([program])) ||
        (college == "COLLEGE OF COMPUTER STUDIES" && computerPrograms.hasAny([program])) ||
        (college == "COLLEGE OF CRIMINAL JUSTICE" && criminalJusticePrograms.hasAny([program])) ||
        (college == "CICS" && computerPrograms.hasAny([program])) // For backward compatibility
      );
    }

    // Validate student data fields
    function isValidStudentData() {
      let data = request.resource.data;
      let requiredFields = [
        'name', 'gender', 'program', 'semester', 'schoolYear',
        'partnerCompany', 'contactPerson', 'location', 'startDate', 'endDate',
        'createdBy', 'updatedBy', 'createdAt', 'updatedAt',
        'college', 'section', 'middleInitial', 'email', 'internshipEmail',
        'midtermsKey', 'finalsKey'
      ];
      
      // Check if all required fields exist
      return data.keys().hasAll(requiredFields) &&
      
      // Validate required string fields
      data.name is string && data.name.size() > 0 &&
      data.gender is string && data.gender.size() > 0 &&
      data.program is string && data.program.size() > 0 &&
      data.semester is string && data.semester.size() > 0 &&
      data.schoolYear is string && data.schoolYear.size() > 0 &&
      data.partnerCompany is string && data.partnerCompany.size() > 0 &&
      data.location is string && data.location.size() > 0 &&
      data.college is string && data.college.size() > 0 &&
      data.section is string &&
      
      // Optional fields can be empty but must exist
      data.middleInitial is string &&
      data.contactPerson is string &&
      data.startDate is string &&
      data.endDate is string &&
      data.email is string && isValidEmailFormat(data.email) &&
      data.internshipEmail is string && isValidEmailFormat(data.internshipEmail) &&
      data.midtermsKey is string &&
      data.finalsKey is string &&
      
      // Optional additional fields
      (!data.keys().hasAny(['concerns']) || data.concerns is string) &&
      (!data.keys().hasAny(['solutions']) || data.solutions is string) &&
      (!data.keys().hasAny(['recommendations']) || data.recommendations is string) &&
      (!data.keys().hasAny(['evaluation']) || data.evaluation is string) &&
      
      // Metadata validation
      data.createdBy is string &&
      data.updatedBy is string &&
      data.createdAt is string &&
      data.updatedAt is string;
    }

    // Validate student survey
    // Used in external program - DO NOT REMOVE
    function isValidStudentSurvey() {
      let reqData = request.resource.data;
      return reqData.keys().hasAll([
        'surveyType',
        'studentName',
        'companyName',
        'program',
        'schoolYear',
        'semester',
        'college',
        'section',
        'studentId',
        'workAttitude',
        'workPerformance',
        'totalScore',
        'maxPossibleScore',
        'submittedAt',
        'submittedBy',
        'status'
      ]) &&
      // Basic fields validation
      reqData.surveyType == 'student' &&
      reqData.studentName is string && reqData.studentName.size() > 0 &&
      reqData.companyName is string && reqData.companyName.size() > 0 &&
      reqData.program is string && reqData.program.size() > 0 &&
      reqData.schoolYear is string && reqData.schoolYear.size() > 0 &&
      reqData.semester is string && reqData.semester.size() > 0 &&
      reqData.college is string && // College field is required but can be empty
      reqData.section is string && reqData.section.size() > 0 &&
      reqData.studentId is string && reqData.studentId.size() > 0 &&

      // Work attitude validation
      reqData.workAttitude is map &&
      reqData.workAttitude.keys().hasAll(['ratings', 'totalScore', 'maxPossibleScore']) &&
      reqData.workAttitude.ratings is map &&
      reqData.workAttitude.totalScore is number &&
      reqData.workAttitude.maxPossibleScore is number &&

      // Work performance validation
      reqData.workPerformance is map &&
      reqData.workPerformance.keys().hasAll(['ratings', 'totalScore', 'maxPossibleScore']) &&
      reqData.workPerformance.ratings is map &&
      reqData.workPerformance.totalScore is number &&
      reqData.workPerformance.maxPossibleScore is number &&

      // Metadata validation
      reqData.totalScore is number &&
      reqData.maxPossibleScore is number &&
      reqData.submittedAt is timestamp &&
      reqData.submittedBy is string &&
      reqData.status is string;
    }

    // Validate company survey
    // Used in external program - DO NOT REMOVE
    function isValidCompanySurvey() {
      let reqData = request.resource.data;
      return reqData.keys().hasAll([
        'surveyType',
        'meetingDate',
        'companyName',
        'studentNames',
        'overallPerformance',
        'tasksAssigned',
        'trainingProvided',
        'technicalSkills',
        'recommendations',
        'industryMentor',
        'recommendToStudents',
        'program',
        'totalScore',
        'maxPossibleScore',
        'submittedAt',
        'submittedBy',
        'status'
      ]) &&
      // Basic fields validation
      reqData.surveyType == 'company' &&
      reqData.meetingDate is string && reqData.meetingDate.size() > 0 &&
      reqData.companyName is string && reqData.companyName.size() > 0 &&
      reqData.studentNames is string && reqData.studentNames.size() > 0 &&
      reqData.program is string && reqData.program.size() > 0 &&
      reqData.overallPerformance is number && 
      reqData.overallPerformance >= 1 && 
      reqData.overallPerformance <= 10 &&
      reqData.tasksAssigned is string && reqData.tasksAssigned.size() > 0 &&
      reqData.trainingProvided is string && reqData.trainingProvided.size() > 0 &&
      reqData.technicalSkills is string && reqData.technicalSkills.size() > 0 &&
      reqData.recommendations is string && reqData.recommendations.size() > 0 &&
      reqData.industryMentor is string && reqData.industryMentor.size() > 0 &&
      reqData.recommendToStudents is string &&
      (reqData.recommendToStudents == 'yes' || reqData.recommendToStudents == 'no') &&

      // Overall score validation
      reqData.totalScore is number &&
      reqData.totalScore >= 0 &&
      reqData.totalScore <= 10 &&
      reqData.maxPossibleScore == 10 &&

      // Metadata validation
      reqData.submittedAt is timestamp &&
      reqData.submittedBy is string &&
      reqData.status is string;
    }

    // Validate company evaluation
    function isValidCompanyEvaluation() {
      let data = request.resource.data;
      return data.keys().hasAll([
        'companyName',
        'studentName',
        'studentId',
        'program',
        'schoolYear',
        'semester',
        'userRole',
        'workEnvironment',
        'performanceSupport',
        'experienceQuality',
        'overall',
        'submittedAt',
        'status'
      ]) &&
      // Basic Information validation
      data.companyName is string && data.companyName.size() > 0 &&
      data.studentName is string && data.studentName.size() > 0 &&
      data.studentId is string && data.studentId.size() > 0 &&
      data.program is string && data.program.size() > 0 &&
      data.schoolYear is string && data.schoolYear.size() > 0 &&
      data.semester is string && data.semester.size() > 0 &&
      data.userRole is string && 
      (data.userRole == 'student' || data.userRole == 'company' || data.userRole == 'adviser') &&

      // Work Environment validation
      data.workEnvironment is map &&
      data.workEnvironment.keys().hasAll([
        'workstation', 'resources', 'safety', 'workload',
        'totalScore', 'maxPossibleScore'
      ]) &&
      data.workEnvironment.workstation is number &&
      data.workEnvironment.workstation >= 0 &&
      data.workEnvironment.workstation <= 5 &&
      data.workEnvironment.totalScore is number &&
      data.workEnvironment.maxPossibleScore == 20 &&

      // Performance Support validation
      data.performanceSupport is map &&
      data.performanceSupport.keys().hasAll([
        'supervision', 'feedback', 'training', 'mentorship',
        'totalScore', 'maxPossibleScore'
      ]) &&
      data.performanceSupport.supervision is number &&
      data.performanceSupport.supervision >= 0 &&
      data.performanceSupport.supervision <= 5 &&
      data.performanceSupport.totalScore is number &&
      data.performanceSupport.maxPossibleScore == 20 &&

      // Experience Quality validation
      data.experienceQuality is map &&
      data.experienceQuality.keys().hasAll([
        'relevance', 'skills', 'growth', 'satisfaction',
        'totalScore', 'maxPossibleScore'
      ]) &&
      data.experienceQuality.relevance is number &&
      data.experienceQuality.relevance >= 0 &&
      data.experienceQuality.relevance <= 5 &&
      data.experienceQuality.totalScore is number &&
      data.experienceQuality.maxPossibleScore == 20 &&

      // Overall Metrics validation
      data.overall is map &&
      data.overall.keys().hasAll([
        'totalScore', 'maxPossibleScore', 'averageRating'
      ]) &&
      data.overall.totalScore is number &&
      data.overall.totalScore >= 0 &&
      data.overall.maxPossibleScore == 60 &&
      data.overall.averageRating is string &&

      // Metadata validation
      data.submittedAt is timestamp &&
      data.status is string &&
      data.status == 'submitted';
    }

    // Flexible validation for student data updates
    function isValidStudentDataUpdate() {
      let data = request.resource.data;
      return 
      // Validate required string fields
      data.name is string && data.name.size() > 0 &&
      data.gender is string && data.gender.size() > 0 &&
      data.program is string && data.program.size() > 0 &&
      data.semester is string && data.semester.size() > 0 &&
      data.schoolYear is string && data.schoolYear.size() > 0 &&
      data.partnerCompany is string && data.partnerCompany.size() > 0 &&
      data.location is string && data.location.size() > 0 &&
      data.college is string && data.college.size() > 0 &&
      
      // Optional fields validation for fields that must exist
      (!data.keys().hasAny(['section']) || data.section is string) &&
      (!data.keys().hasAny(['middleInitial']) || data.middleInitial is string) &&
      (!data.keys().hasAny(['contactPerson']) || data.contactPerson is string) &&
      (!data.keys().hasAny(['concerns']) || data.concerns is string) &&
      (!data.keys().hasAny(['solutions']) || data.solutions is string) &&
      (!data.keys().hasAny(['recommendations']) || data.recommendations is string) &&
      (!data.keys().hasAny(['evaluation']) || data.evaluation is string) &&
      (!data.keys().hasAny(['startDate']) || data.startDate is string) &&
      (!data.keys().hasAny(['endDate']) || data.endDate is string) &&
      (!data.keys().hasAny(['email']) || (data.email is string && isValidEmailFormat(data.email))) &&
      (!data.keys().hasAny(['internshipEmail']) || (data.internshipEmail is string && isValidEmailFormat(data.internshipEmail))) &&
      (!data.keys().hasAny(['midtermsKey']) || data.midtermsKey is string) &&
      (!data.keys().hasAny(['finalsKey']) || data.finalsKey is string) &&
      
      // Metadata validation
      data.createdBy is string &&
      data.updatedBy is string &&
      data.createdAt is string &&
      data.updatedAt is string;
    }

    // Validate section data
    function isValidSectionData() {
      let data = request.resource.data;
      return data.keys().hasAll([
        'sectionName',
        'college',
        'instructorId',
        'instructorName',
        'createdAt',
        'updatedAt',
        'createdBy',
        'updatedBy'
      ]) &&
      // Validate required fields
      data.sectionName is string && data.sectionName.size() > 0 &&
      data.college is string && data.college.size() > 0 &&
      data.instructorId is string && data.instructorId.size() > 0 &&
      data.instructorName is string && data.instructorName.size() > 0 &&
      // Metadata validation
      data.createdAt is string &&
      data.updatedAt is string &&
      data.createdBy is string &&
      data.updatedBy is string;
    }

    // Validate section student data
    function isValidSectionStudent() {
      let data = request.resource.data;
      return data.keys().hasAll([
        'studentName',
        'studentId',
        'addedAt',
        'addedBy'
      ]) &&
      // Validate required fields
      data.studentName is string && data.studentName.size() > 0 &&
      data.studentId is string && data.studentId.size() > 0 &&
      // Optional fields validation for fields that might exist
      (!data.keys().hasAny(['program']) || data.program is string) &&
      (!data.keys().hasAny(['email']) || (data.email is string && isValidEmailFormat(data.email))) &&
      (!data.keys().hasAny(['internshipEmail']) || (data.internshipEmail is string && isValidEmailFormat(data.internshipEmail))) &&
      (!data.keys().hasAny(['midtermsKey']) || data.midtermsKey is string) &&
      (!data.keys().hasAny(['finalsKey']) || data.finalsKey is string) &&
      // Metadata validation
      data.addedAt is string &&
      data.addedBy is string;
    }

    // Validate company data
    function isValidCompanyData() {
      let data = request.resource.data;
      return data.keys().hasAll([
        'companyName',
        'normalizedName',
        'createdAt',
        'updatedAt',
        'createdBy',
        'updatedBy'
      ]) &&
      // Validate required fields
      data.companyName is string && data.companyName.size() > 0 &&
      data.normalizedName is string && data.normalizedName.size() > 0 &&
      // Metadata validation
      data.createdAt is string &&
      data.updatedAt is string &&
      data.createdBy is string &&
      data.updatedBy is string;
    }
    
    // Validate company student data
    function isValidCompanyStudent() {
      let data = request.resource.data;
      return data.keys().hasAll([
        'studentName',
        'studentId',
        'addedAt',
        'addedBy'
      ]) &&
      // Validate required fields
      data.studentName is string && data.studentName.size() > 0 &&
      data.studentId is string && data.studentId.size() > 0 &&
      // Optional fields validation for fields that might exist
      (!data.keys().hasAny(['program']) || data.program is string) &&
      (!data.keys().hasAny(['section']) || data.section is string) &&
      (!data.keys().hasAny(['college']) || data.college is string) &&
      (!data.keys().hasAny(['startDate']) || data.startDate is string) &&
      (!data.keys().hasAny(['endDate']) || data.endDate is string) &&
      (!data.keys().hasAny(['email']) || (data.email is string && isValidEmailFormat(data.email))) &&
      (!data.keys().hasAny(['internshipEmail']) || (data.internshipEmail is string && isValidEmailFormat(data.internshipEmail))) &&
      (!data.keys().hasAny(['midtermsKey']) || data.midtermsKey is string) &&
      (!data.keys().hasAny(['finalsKey']) || data.finalsKey is string) &&
      // Metadata validation
      data.addedAt is string &&
      data.addedBy is string;
    }

    // COLLECTION RULES

    // Users Collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if request.auth != null && 
                    request.auth.uid == userId && 
                    request.resource.data.keys().hasAll([
                      'firstName', 'lastName', 'email', 'role', 
                      'idNumber', 'phoneNumber', 'createdAt'
                    ]) &&
                    (
                      // For admin accounts
                      (request.resource.data.role == 'admin') ||
                      // For instructor accounts
                      (request.resource.data.role == 'instructor' &&
                       request.resource.data.college is string)
                    );
      allow update: if (isAdmin() || request.auth.uid == userId) && 
                    request.resource.data.keys().hasAll([
                      'firstName', 'lastName', 'email', 'role', 
                      'idNumber', 'phoneNumber', 'createdAt'
                    ]) &&
                    (
                      // For admin accounts
                      (request.resource.data.role == 'admin') ||
                      // For instructor accounts
                      (request.resource.data.role == 'instructor' &&
                       request.resource.data.college is string)
                    );
      allow delete: if isAdmin() && request.auth.uid != userId;
    }

    // Admin Profiles Collection
    match /users/{userId}/adminProfile/{document=**} {
      allow read: if isAdmin();
      allow write: if isAdmin() || 
                   (request.auth.uid == userId && 
                    request.resource.data.adminKeyVerified == true);
    }

    // Profile Collection
    match /profile/{userId} {
      allow read: if isAuthenticated();
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if isAdmin() || isOwner(userId);
      allow delete: if isAdmin();
    }

    // StudentData Collection
    match /studentData/{docId} {
      // Allow authenticated users to read for key validation
      allow read: if true;  // Allow anyone to read for validation purposes

      // Original rules for more specific operations
      allow create: if isAuthenticated() && 
                    isValidStudentData() &&
                    (isAdmin() || 
                      (isInstructor() && 
                       request.resource.data.college == getUserCollege() &&
                       (getUserSections().size() == 0 || 
                        getUserSections().hasAny([request.resource.data.section])))) &&
                    request.resource.data.createdBy == request.auth.uid &&
                    request.resource.data.updatedBy == request.auth.uid;
      // Combined update rule with special case for concerns/solutions
      allow update: if isAuthenticated() && (
                    // Special case for concerns and solutions only (partial update)
                    (
                      // Check if we're only updating a subset of fields related to concerns/solutions
                      request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                        'concerns', 'solutions', 'recommendations', 'evaluation', 
                        'updatedAt', 'updatedBy'
                      ]) &&
                      // We still validate the updater and ensure the format is correct
                      // But we don't require specifically that the updater be the current user
                      request.resource.data.updatedBy is string && 
                      (request.resource.data.updatedAt is string || request.resource.data.updatedAt is timestamp)
                    )
                    ||
                    // Original validation for full updates
                    (
                      isValidStudentDataUpdate() &&
                      (isAdmin() || 
                        (isInstructor() && 
                         request.resource.data.college == getUserCollege() &&
                         (getUserSections().size() == 0 || 
                          getUserSections().hasAny([request.resource.data.section])))) &&
                      request.resource.data.updatedBy == request.auth.uid
                    )
                   );
      allow delete: if isAuthenticated() && 
                    (isAdmin() || 
                      (isInstructor() && 
                       resource.data.college == getUserCollege() &&
                       (!resource.data.keys().hasAny(['section']) || 
                        resource.data.section == null || 
                        resource.data.section == "" || 
                        getUserSections().hasAny([resource.data.section]) || 
                        getUserSections().size() == 0)));
    }

    // Student Surveys Collection
    match /studentSurveys/{surveyId} {
      allow read: if true;  // Allow anyone to read
      allow create: if true;  // Allow anyone to create without validation
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // Period-specific Student Surveys Collections
    match /studentSurveys_midterm/{surveyId} {
      allow read: if true;  // Allow anyone to read
      allow create: if true;  // Allow anyone to create without validation
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /studentSurveys_final/{surveyId} {
      allow read: if true;  // Allow anyone to read
      allow create: if true;  // Allow anyone to create without validation
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // OJT Advisers Collection
    match /OJTadvisers/{surveyId} {
      allow read: if true;  // Allow anyone to read
      allow create: if true;  // Allow anyone to create without validation
      allow update: if false;
      allow delete: if false;
    }

    // Period-specific OJT Advisers Collections with updated structure
    match /OJTadvisers_midterm/{surveyId} {
      allow read: if true;  // Allow anyone to read
      allow create: if true;  // Allow anyone to create without validation
      allow update: if false;
      allow delete: if false;
    }

    match /OJTadvisers_midterms/{surveyId} {
      allow read: if true;  // Allow anyone to read
      allow create: if true;  // Allow anyone to create without validation
      allow update: if false;
      allow delete: if false;
    }

    match /OJTadvisers_final/{surveyId} {
      allow read: if true;  // Allow anyone to read
      allow create: if true;  // Allow anyone to create without validation
      allow update: if false;
      allow delete: if false;
    }

    match /OJTadvisers_finals/{surveyId} {
      allow read: if true;  // Allow anyone to read
      allow create: if true;  // Allow anyone to create without validation
      allow update: if false;
      allow delete: if false;
    }

    // Concerns and Solutions Collection
    match /concerns_solutions/{docId} {
      allow read: if true;  // Allow anyone to read 
      allow create: if true; // Allow anyone to create
      allow update: if false;
      allow delete: if false;
    }

    // Student Feedback Collection 
    match /student_feedback/{docId} {
      allow read: if true;  // Allow anyone to read
      allow create: if true; // Allow anyone to create 
      allow update: if false;
      allow delete: if false;
    }

    // General Feedback Collection
    match /feedback/{docId} {
      allow read: if true;  // Allow anyone to read
      allow create: if true; // Allow anyone to create
      allow update: if false;
      allow delete: if false;
    }

    // Company Evaluations Collection Rules
    match /companyEvaluations/{surveyId} {
      allow read: if true;
      allow create: if true;  // Allow anyone to create without validation
      allow update: if false;
      allow delete: if false;
    }

    // Period-specific Company Evaluations Collections
    match /companyEvaluations_midterm/{surveyId} {
      allow read: if true;
      allow create: if true;  // Allow anyone to create without validation
      allow update: if false;
      allow delete: if false;
    }

    match /companyEvaluations_final/{surveyId} {
      allow read: if true;
      allow create: if true;  // Allow anyone to create without validation
      allow update: if false;
      allow delete: if false;
    }

    // Legacy Collections
    match /studentSurveys_legacy/{surveyId} {
      allow read: if true;
      allow create: if true;  // Allow anyone to create without validation
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    match /companyEvaluations_legacy/{surveyId} {
      allow read: if true;
      allow create: if true;  // Allow anyone to create without validation
      allow update: if false;
      allow delete: if false;
    }

    // Admin Profiles Collection
    match /users/{userId}/adminProfile/{document=**} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }

    // Instructor Profiles Collection
    match /users/{userId}/instructorProfile/{document=**} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow write: if isAuthenticated() && (isOwner(userId) || isAdmin());
    }

    // Student Records Collection
    match /students/{studentId}/records/{recordId} {
      allow read: if isAuthenticated() && (
        isAdmin() || 
        (isInstructor() && 
         resource.data.college == getUserCollege())
      );
      allow write: if isAuthenticated() && (
        isAdmin() || 
        (isInstructor() && 
         request.resource.data.college == getUserCollege() &&
         request.resource.data.instructorId == request.auth.uid)
      );
    }

    // Sections Collection - For storing section information
    match /sections/{sectionId} {
      // Allow anyone to read basic section information (including anonymous users)
      allow read: if true;
      
      // Only admins and instructors for the relevant college can create sections
      allow create: if isAuthenticated() && 
                    isValidSectionData() &&
                    (isAdmin() || 
                      (isInstructor() && 
                       request.resource.data.college == getUserCollege() &&
                       (request.resource.data.instructorId == request.auth.uid ||
                        getUserSections().hasAny([sectionId])))) &&
                    request.resource.data.createdBy == request.auth.uid &&
                    request.resource.data.updatedBy == request.auth.uid;
      
      // Only admins and the assigned instructor can update sections
      allow update: if isAuthenticated() &&
                    isValidSectionData() &&
                    (isAdmin() || 
                      (isInstructor() && 
                       request.resource.data.college == getUserCollege() &&
                       (resource.data.instructorId == request.auth.uid || 
                        request.resource.data.instructorId == request.auth.uid ||
                        getUserSections().hasAny([sectionId])))) &&
                    request.resource.data.updatedBy == request.auth.uid;
      
      // Only admins can delete sections
      allow delete: if isAdmin();
      
      // Section Students subcollection for students in this section
      match /students/{studentId} {
        // Anyone can read student names within sections (including anonymous users)
        allow read: if true;
        
        // Only admins and the section's instructor can add students
        allow create: if isAuthenticated() && 
                      isValidSectionStudent() &&
                      (isAdmin() || 
                        (isInstructor() && 
                         (get(/databases/$(database)/documents/sections/$(sectionId)).data.instructorId == request.auth.uid ||
                          getUserSections().hasAny([sectionId])))) &&
                      request.resource.data.addedBy == request.auth.uid;
        
        // Only admins and the section's instructor can update student entries
        allow update: if isAuthenticated() && 
                      isValidSectionStudent() &&
                      (isAdmin() || 
                        (isInstructor() && 
                         (get(/databases/$(database)/documents/sections/$(sectionId)).data.instructorId == request.auth.uid ||
                          getUserSections().hasAny([sectionId])))) &&
                      request.resource.data.addedBy == request.auth.uid;
        
        // Only admins and the section's instructor can remove students
        allow delete: if isAuthenticated() && 
                      (isAdmin() || 
                        (isInstructor() && 
                         (get(/databases/$(database)/documents/sections/$(sectionId)).data.instructorId == request.auth.uid ||
                          getUserSections().hasAny([sectionId]))));
      }
    }
    
    // Companies Collection - For organizing students by company
    match /companies/{companyId} {
      // Allow anyone to read basic company information
      allow read: if true;
      
      // Only authenticated users can create company records
      allow create: if isAuthenticated() && 
                    isValidCompanyData() &&
                    request.resource.data.createdBy == request.auth.uid &&
                    request.resource.data.updatedBy == request.auth.uid;
      
      // Only authenticated users can update company information
      allow update: if isAuthenticated() &&
                    isValidCompanyData() &&
                    request.resource.data.updatedBy == request.auth.uid;
      
      // Only admins can delete companies
      allow delete: if isAdmin();
      
      // Company Students subcollection
      match /students/{studentId} {
        // Anyone can read students within a company
        allow read: if true;
        
        // Only authenticated users can add students to companies
        allow create: if isAuthenticated() && 
                      isValidCompanyStudent() &&
                      request.resource.data.addedBy == request.auth.uid;
        
        // Only authenticated users can update student entries in companies
        allow update: if isAuthenticated() && 
                      isValidCompanyStudent() &&
                      request.resource.data.addedBy == request.auth.uid;
        
        // Only admins and the instructor who added the student can remove them
        allow delete: if isAuthenticated() && 
                      (isAdmin() || request.auth.uid == resource.data.addedBy);
      }
    }

    // NEW COLLECTION STRUCTURE: Departments
    match /departments/{departmentId} {
      // Allow anyone to read department information
      allow read: if true;
      
      // Allow creation and updates without department validation
      allow create: if true;
      allow update: if true;
      
      // Only admins can delete departments
      allow delete: if isAdmin();
      
      // Sections subcollection within departments
      match /sections/{sectionId} {
        // Allow reading of sections within a department
        allow read: if true;
        
        // Allow creating sections
        allow create: if true;
        
        // Allow updating sections
        allow update: if true;
        
        // Only admins can delete sections
        allow delete: if isAdmin();
        
        // Students subcollection within sections
        match /students/{studentId} {
          // Allow reading students within a section
          allow read: if true;
          
          // Allow creating student records
          allow create: if true;
          
          // Allow updating student records
          allow update: if true;
          
          // Allow deleting student records
          allow delete: if isAdmin();
          
          // Student-surveys subcollection
          match /student-surveys/{surveyId} {
            // Allow reading surveys
            allow read: if true;
            
            // Allow creating surveys with validation
            allow create: if true;
            
            // No updates to submitted surveys
            allow update: if false;
            
            // Only admins can delete surveys
            allow delete: if isAdmin();
          }
          
          // Evaluations subcollection
          match /evaluations/{evalId} {
            // Allow reading evaluations
            allow read: if true;
            
            // Allow creating evaluations without validation
            allow create: if true;
            
            // No updates to submitted evaluations
            allow update: if false;
            
            // Only admins can delete evaluations
            allow delete: if isAdmin();
          }
          
          // Period-specific evaluations
          match /evaluations_midterm/{evalId} {
            allow read: if true;
            allow create: if true;
            allow update: if false;
            allow delete: if isAdmin();
          }
          
          match /evaluations_final/{evalId} {
            allow read: if true;
            allow create: if true;
            allow update: if false;
            allow delete: if isAdmin();
          }
        }
      }
      
      // Companies subcollection within departments
      match /companies/{companyId} {
        // Allow reading companies
        allow read: if true;
        
        // Allow creating company records
        allow create: if true;
        
        // Allow updating company information
        allow update: if true;
        
        // Only admins can delete companies
        allow delete: if isAdmin();
        
        // Surveys subcollection within companies
        match /surveys/{surveyId} {
          // Allow reading surveys
          allow read: if true;
          
          // Allow creating surveys without validation
          allow create: if true;
          
          // No updates to submitted surveys
          allow update: if false;
          
          // Only admins can delete surveys
          allow delete: if isAdmin();
        }
      }
    }

    // Add a specific rule for batch deletions
    match /{document=**} {
      allow delete: if isAdmin() &&
                      (request.path.segments[0] == 'users' || 
                       request.path.segments[0] == 'profile') &&
                      request.auth.uid != resource.id;
    }

    // Settings Collection - Admin only
    match /settings/{settingId} {
      // Only administrators can read or write to settings
      allow read: if true;  // Allow reading by all (settings checked client-side)
      allow write: if isAdmin();  // Only admins can modify settings
    }
    
    // Evaluation Collections - Allow read access to all users
    match /studentSurveys_midterm/{docId} {
      allow read: if true;
    }
    
    match /studentSurveys_final/{docId} {
      allow read: if true;
    }
    
    match /companyEvaluations_midterm/{docId} {
      allow read: if true;
    }
    
    match /companyEvaluations_final/{docId} {
      allow read: if true;
    }
  }
} 